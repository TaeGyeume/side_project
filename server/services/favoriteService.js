const mongoose = require('mongoose');
const Favorite = require('../models/Favorite'); // ‚úÖ ÎåÄÏÜåÎ¨∏Ïûê ÌôïÏù∏
const Accommodation = require('../models/Accommodation');
const TourTicket = require('../models/TourTicket');
const TravelItem = require('../models/TravelItem');

// ‚úÖ Ï†ïÌôïÌïú itemTypeÏùÑ Ïú†ÏßÄÌïòÍ∏∞ ÏúÑÌï¥ ÎåÄÏÜåÎ¨∏ÏûêÎ•º ÎßûÏ∂ò modelMap
const modelMap = {
  accommodation: Accommodation,
  tourTicket: TourTicket, // ‚úÖ Ï†ïÌôïÌïú ÎåÄÏÜåÎ¨∏Ïûê ÏÇ¨Ïö©
  travelItem: TravelItem
};

// Ï¶êÍ≤®Ï∞æÍ∏∞ Ï∂îÍ∞Ä ÎòêÎäî ÏÇ≠Ï†ú (ÌÜ†Í∏Ä Í∏∞Îä• Ìè¨Ìï®)
const toggleFavorite = async (userId, itemId, itemType) => {
  try {
    console.log(
      `üîç toggleFavorite called with: userId=${userId}, itemId=${itemId}, itemType=${itemType}`
    );

    // ‚úÖ ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ÏóêÏÑú Î≥ÄÌôòÌïú itemTypeÏùÑ Í∑∏ÎåÄÎ°ú ÏÇ¨Ïö©
    if (!modelMap[itemType]) {
      throw new Error(
        `Invalid item type received: ${itemType}. Expected one of: ${Object.keys(modelMap).join(', ')}`
      );
    }

    // Ìï¥Îãπ ÏïÑÏù¥ÌÖúÏù¥ Ï°¥Ïû¨ÌïòÎäîÏßÄ ÌôïÏù∏
    const item = await modelMap[itemType].findById(itemId);
    if (!item) {
      throw new Error(`Item not found: ${itemId} in ${itemType}`);
    }

    // Ïù¥ÎØ∏ Ï¶êÍ≤®Ï∞æÍ∏∞Ïóê ÏûàÎäîÏßÄ ÌôïÏù∏
    const existingFavorite = await Favorite.findOne({
      user: userId,
      item: itemId,
      itemType
    });

    if (existingFavorite) {
      // ‚úÖ Ïù¥ÎØ∏ Ï°¥Ïû¨ÌïòÎ©¥ ÏÇ≠Ï†ú (ÌÜ†Í∏Ä Í∏∞Îä•)
      await Favorite.deleteOne({_id: existingFavorite._id});
      console.log(`üóëÔ∏è Removed from favorites: ${itemId} (${itemType})`);
      return {message: 'Favorite removed successfully'};
    } else {
      // ‚úÖ Ï°¥Ïû¨ÌïòÏßÄ ÏïäÏúºÎ©¥ Ï∂îÍ∞Ä
      const favorite = new Favorite({user: userId, item: itemId, itemType});
      await favorite.save();
      console.log(`‚≠ê Added to favorites: ${itemId} (${itemType})`);
      return {message: 'Favorite added successfully', favorite};
    }
  } catch (error) {
    console.error('‚ùå Error in toggleFavorite service:', error.message);
    throw error;
  }
};

// ÏÇ¨Ïö©Ïûê Ï¶êÍ≤®Ï∞æÍ∏∞ Î™©Î°ù Ï°∞Ìöå (populate Ï†ÅÏö©)
const getUserFavorites = async userId => {
  try {
    console.log(`üì• Fetching favorites for user: ${userId}`);

    const favorites = await Favorite.find({user: userId})
      .populate({
        path: 'item',
        select: 'title images price location'
      })
      .exec();

    // ÏùëÎãµ Îç∞Ïù¥ÌÑ∞ Í∞ÄÍ≥µ
    const formattedFavorites = favorites.map(fav => ({
      _id: fav._id,
      itemType: fav.itemType,
      title: fav.item?.title || 'No Title',
      location: fav.item?.location || 'Unknown',
      price: fav.item?.price || 0,
      images: fav.item?.images || []
    }));

    return formattedFavorites;
  } catch (error) {
    console.error('‚ùå Error fetching user favorites:', error.message);
    throw new Error('Error fetching user favorites');
  }
};

module.exports = {
  toggleFavorite,
  getUserFavorites
};
